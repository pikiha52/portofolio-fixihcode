{"ast":null,"code":"\"use strict\"; // Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n\nconst executable_response_1 = require(\"./executable-response\");\n\nconst pluggable_auth_handler_1 = require(\"./pluggable-auth-handler\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\n\n\nclass ExecutableError extends Error {\n  constructor(message, code) {\n    super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n    this.code = code;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n}\n\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\n\nconst DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\n\nconst MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\n\nconst MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\n\nconst GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\n\nconst MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\n\nclass PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates a PluggableAuthClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid pluggable auth credential.\n   * @param options The external account options object typically loaded from\n   *   the external account JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n\n    if (!options.credential_source.executable) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    }\n\n    this.command = options.credential_source.executable.command;\n\n    if (!this.command) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    } // Check if the provided timeout exists and if it is valid.\n\n\n    if (options.credential_source.executable.timeout_millis === undefined) {\n      this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n    } else {\n      this.timeoutMillis = options.credential_source.executable.timeout_millis;\n\n      if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n        throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` + `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n      }\n    }\n\n    this.outputFile = options.credential_source.executable.output_file;\n    this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n      command: this.command,\n      timeoutMillis: this.timeoutMillis,\n      outputFile: this.outputFile\n    });\n    this.credentialSourceType = 'executable';\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this calls a user provided executable which returns the subject token.\n   * The logic is summarized as:\n   * 1. Validated that the executable is allowed to run. The\n   *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n   *    1 for security reasons.\n   * 2. If an output file is specified by the user, check the file location\n   *    for a response. If the file exists and contains a valid response,\n   *    return the subject token from the file.\n   * 3. Call the provided executable and return response.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  async retrieveSubjectToken() {\n    // Check if the executable is allowed to run.\n    if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1') {\n      throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' + 'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' + 'Variable to 1.');\n    }\n\n    let executableResponse = undefined; // Try to get cached executable response from output file.\n\n    if (this.outputFile) {\n      executableResponse = await this.handler.retrieveCachedResponse();\n    } // If no response from output file, call the executable.\n\n\n    if (!executableResponse) {\n      // Set up environment map with required values for the executable.\n      const envMap = new Map();\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType); // Always set to 0 because interactive mode is not supported.\n\n      envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n\n      if (this.outputFile) {\n        envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n      }\n\n      const serviceAccountEmail = this.getServiceAccountEmail();\n\n      if (serviceAccountEmail) {\n        envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n      }\n\n      executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);\n    }\n\n    if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n      throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n    } // Check that response was successful.\n\n\n    if (!executableResponse.success) {\n      throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n    } // Check that response contains expiration time if output file was specified.\n\n\n    if (this.outputFile) {\n      if (!executableResponse.expirationTime) {\n        throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n      }\n    } // Check that response is not expired.\n\n\n    if (executableResponse.isExpired()) {\n      throw new Error('Executable response is expired.');\n    } // Return subject token from response.\n\n\n    return executableResponse.subjectToken;\n  }\n\n}\n\nexports.PluggableAuthClient = PluggableAuthClient;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"],"names":["Object","defineProperty","exports","value","PluggableAuthClient","ExecutableError","baseexternalclient_1","require","executable_response_1","pluggable_auth_handler_1","Error","constructor","message","code","setPrototypeOf","new","target","prototype","DEFAULT_EXECUTABLE_TIMEOUT_MILLIS","MINIMUM_EXECUTABLE_TIMEOUT_MILLIS","MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS","GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES","MAXIMUM_EXECUTABLE_VERSION","BaseExternalAccountClient","options","additionalOptions","credential_source","executable","command","timeout_millis","undefined","timeoutMillis","outputFile","output_file","handler","PluggableAuthHandler","credentialSourceType","retrieveSubjectToken","process","env","executableResponse","retrieveCachedResponse","envMap","Map","set","audience","subjectTokenType","serviceAccountEmail","getServiceAccountEmail","retrieveResponseFromExecutable","version","success","errorMessage","errorCode","expirationTime","InvalidExpirationTimeFieldError","isExpired","subjectToken"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAA7D;;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,sBAAD,CAApC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uBAAD,CAArC;;AACA,MAAME,wBAAwB,GAAGF,OAAO,CAAC,0BAAD,CAAxC;AACA;AACA;AACA;;;AACA,MAAMF,eAAN,SAA8BK,KAA9B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACvB,UAAO,yCAAwCA,IAAK,uBAAsBD,OAAQ,GAAlF;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACAb,IAAAA,MAAM,CAACc,cAAP,CAAsB,IAAtB,EAA4BC,GAAG,CAACC,MAAJ,CAAWC,SAAvC;AACH;;AAL+B;;AAOpCf,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA;AACA;AACA;;AACA,MAAMa,iCAAiC,GAAG,KAAK,IAA/C;AACA;AACA;AACA;;AACA,MAAMC,iCAAiC,GAAG,IAAI,IAA9C;AACA;AACA;AACA;;AACA,MAAMC,iCAAiC,GAAG,MAAM,IAAhD;AACA;AACA;AACA;AACA;;AACA,MAAMC,yCAAyC,GAAG,2CAAlD;AACA;AACA;AACA;;AACA,MAAMC,0BAA0B,GAAG,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMlB,mBAAN,SAA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","sourcesContent":["\"use strict\";\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst executable_response_1 = require(\"./executable-response\");\nconst pluggable_auth_handler_1 = require(\"./pluggable-auth-handler\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\nclass ExecutableError extends Error {\n    constructor(message, code) {\n        super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\nconst DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\nconst MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\nconst MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\nconst GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\nconst MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\nclass PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates a PluggableAuthClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid pluggable auth credential.\n     * @param options The external account options object typically loaded from\n     *   the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        if (!options.credential_source.executable) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        this.command = options.credential_source.executable.command;\n        if (!this.command) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        // Check if the provided timeout exists and if it is valid.\n        if (options.credential_source.executable.timeout_millis === undefined) {\n            this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n        }\n        else {\n            this.timeoutMillis = options.credential_source.executable.timeout_millis;\n            if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS ||\n                this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n                throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` +\n                    `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n            }\n        }\n        this.outputFile = options.credential_source.executable.output_file;\n        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n            command: this.command,\n            timeoutMillis: this.timeoutMillis,\n            outputFile: this.outputFile,\n        });\n        this.credentialSourceType = 'executable';\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this calls a user provided executable which returns the subject token.\n     * The logic is summarized as:\n     * 1. Validated that the executable is allowed to run. The\n     *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n     *    1 for security reasons.\n     * 2. If an output file is specified by the user, check the file location\n     *    for a response. If the file exists and contains a valid response,\n     *    return the subject token from the file.\n     * 3. Call the provided executable and return response.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Check if the executable is allowed to run.\n        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1') {\n            throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' +\n                'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' +\n                'Variable to 1.');\n        }\n        let executableResponse = undefined;\n        // Try to get cached executable response from output file.\n        if (this.outputFile) {\n            executableResponse = await this.handler.retrieveCachedResponse();\n        }\n        // If no response from output file, call the executable.\n        if (!executableResponse) {\n            // Set up environment map with required values for the executable.\n            const envMap = new Map();\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType);\n            // Always set to 0 because interactive mode is not supported.\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n            if (this.outputFile) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n            }\n            const serviceAccountEmail = this.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n            }\n            executableResponse =\n                await this.handler.retrieveResponseFromExecutable(envMap);\n        }\n        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n            throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n        }\n        // Check that response was successful.\n        if (!executableResponse.success) {\n            throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n        }\n        // Check that response contains expiration time if output file was specified.\n        if (this.outputFile) {\n            if (!executableResponse.expirationTime) {\n                throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n            }\n        }\n        // Check that response is not expired.\n        if (executableResponse.isExpired()) {\n            throw new Error('Executable response is expired.');\n        }\n        // Return subject token from response.\n        return executableResponse.subjectToken;\n    }\n}\nexports.PluggableAuthClient = PluggableAuthClient;\n"]},"metadata":{},"sourceType":"script"}
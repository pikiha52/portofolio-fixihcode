{"ast":null,"code":"\"use strict\"; // Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */\n\nclass DefaultAwsSecurityCredentialsSupplier {\n  /**\n   * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n   * from the credential_source stored in the ADC file.\n   * @param opts The default aws security credentials supplier options object to\n   *   build the supplier with.\n   */\n  constructor(opts) {\n    _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n\n    this.regionUrl = opts.regionUrl;\n    this.securityCredentialsUrl = opts.securityCredentialsUrl;\n    this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n    this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n  }\n  /**\n   * Returns the active AWS region. This first checks to see if the region\n   * is available as an environment variable. If it is not, then the supplier\n   * will call the region URL.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link AwsClient}, contains the requested audience and subject token type\n   *   for the external account identity.\n   * @return A promise that resolves with the AWS region string.\n   */\n\n\n  async getAwsRegion(context) {\n    // Priority order for region determination:\n    // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n    if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n      return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n    }\n\n    const metadataHeaders = {};\n\n    if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n      metadataHeaders['x-aws-ec2-metadata-token'] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n    }\n\n    if (!this.regionUrl) {\n      throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n    }\n\n    const opts = { ...this.additionalGaxiosOptions,\n      url: this.regionUrl,\n      method: 'GET',\n      responseType: 'text',\n      headers: metadataHeaders\n    };\n    const response = await context.transporter.request(opts); // Remove last character. For example, if us-east-2b is returned,\n    // the region would be us-east-2.\n\n    return response.data.substr(0, response.data.length - 1);\n  }\n  /**\n   * Returns AWS security credentials. This first checks to see if the credentials\n   * is available as environment variables. If it is not, then the supplier\n   * will call the security credentials URL.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link AwsClient}, contains the requested audience and subject token type\n   *   for the external account identity.\n   * @return A promise that resolves with the AWS security credentials.\n   */\n\n\n  async getAwsSecurityCredentials(context) {\n    // Check environment variables for permanent credentials first.\n    // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n    if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n      return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n    }\n\n    const metadataHeaders = {};\n\n    if (this.imdsV2SessionTokenUrl) {\n      metadataHeaders['x-aws-ec2-metadata-token'] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n    } // Since the role on a VM can change, we don't need to cache it.\n\n\n    const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter); // Temporary credentials typically last for several hours.\n    // Expiration is returned in response.\n    // Consider future optimization of this logic to cache AWS tokens\n    // until their natural expiration.\n\n    const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n    return {\n      accessKeyId: awsCreds.AccessKeyId,\n      secretAccessKey: awsCreds.SecretAccessKey,\n      token: awsCreds.Token\n    };\n  }\n\n}\n\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken =\n/**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n  const opts = { ...this.additionalGaxiosOptions,\n    url: this.imdsV2SessionTokenUrl,\n    method: 'PUT',\n    responseType: 'text',\n    headers: {\n      'x-aws-ec2-metadata-token-ttl-seconds': '300'\n    }\n  };\n  const response = await transporter.request(opts);\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName =\n/**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n  if (!this.securityCredentialsUrl) {\n    throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n  }\n\n  const opts = { ...this.additionalGaxiosOptions,\n    url: this.securityCredentialsUrl,\n    method: 'GET',\n    responseType: 'text',\n    headers: headers\n  };\n  const response = await transporter.request(opts);\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials =\n/**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n  const response = await transporter.request({ ...this.additionalGaxiosOptions,\n    url: `${this.securityCredentialsUrl}/${roleName}`,\n    responseType: 'json',\n    headers: headers\n  });\n  return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n  // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n  // Only one is required.\n  return process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null;\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n  // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n  if (process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY']) {\n    return {\n      accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n      secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n      token: process.env['AWS_SESSION_TOKEN']\n    };\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js"],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_DefaultAwsSecurityCredentialsSupplier_instances","_DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken","_DefaultAwsSecurityCredentialsSupplier_getAwsRoleName","_DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials","_DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get","_DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get","Object","defineProperty","exports","DefaultAwsSecurityCredentialsSupplier","constructor","opts","add","regionUrl","securityCredentialsUrl","imdsV2SessionTokenUrl","additionalGaxiosOptions","getAwsRegion","context","metadataHeaders","transporter","Error","url","method","responseType","headers","response","request","data","substr","length","getAwsSecurityCredentials","roleName","awsCreds","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","token","Token","WeakSet","process","env"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */\nclass DefaultAwsSecurityCredentialsSupplier {\n    /**\n     * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n     * from the credential_source stored in the ADC file.\n     * @param opts The default aws security credentials supplier options object to\n     *   build the supplier with.\n     */\n    constructor(opts) {\n        _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n        this.regionUrl = opts.regionUrl;\n        this.securityCredentialsUrl = opts.securityCredentialsUrl;\n        this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Returns the active AWS region. This first checks to see if the region\n     * is available as an environment variable. If it is not, then the supplier\n     * will call the region URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS region string.\n     */\n    async getAwsRegion(context) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: metadataHeaders,\n        };\n        const response = await context.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * Returns AWS security credentials. This first checks to see if the credentials\n     * is available as environment variables. If it is not, then the supplier\n     * will call the security credentials URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS security credentials.\n     */\n    async getAwsSecurityCredentials(context) {\n        // Check environment variables for permanent credentials first.\n        // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        // Since the role on a VM can change, we don't need to cache it.\n        const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);\n        // Temporary credentials typically last for several hours.\n        // Expiration is returned in response.\n        // Consider future optimization of this logic to cache AWS tokens\n        // until their natural expiration.\n        const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n        return {\n            accessKeyId: awsCreds.AccessKeyId,\n            secretAccessKey: awsCreds.SecretAccessKey,\n            token: awsCreds.Token,\n        };\n    }\n}\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken = \n/**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.imdsV2SessionTokenUrl,\n        method: 'PUT',\n        responseType: 'text',\n        headers: { 'x-aws-ec2-metadata-token-ttl-seconds': '300' },\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName = \n/**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n    if (!this.securityCredentialsUrl) {\n        throw new Error('Unable to determine AWS role name due to missing ' +\n            '\"options.credential_source.url\"');\n    }\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.securityCredentialsUrl,\n        method: 'GET',\n        responseType: 'text',\n        headers: headers,\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials = \n/**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n    const response = await transporter.request({\n        ...this.additionalGaxiosOptions,\n        url: `${this.securityCredentialsUrl}/${roleName}`,\n        responseType: 'json',\n        headers: headers,\n    });\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n    // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n    // Only one is required.\n    return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null);\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n    // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n    if (process.env['AWS_ACCESS_KEY_ID'] &&\n        process.env['AWS_SECRET_ACCESS_KEY']) {\n        return {\n            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n            token: process.env['AWS_SESSION_TOKEN'],\n        };\n    }\n    return null;\n};\n"]},"metadata":{},"sourceType":"script"}
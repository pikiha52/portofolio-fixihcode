{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\n\nconst gtoken_1 = require(\"gtoken\");\n\nconst jwtaccess_1 = require(\"./jwtaccess\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nconst authclient_1 = require(\"./authclient\");\n\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super(opts);\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims; // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  createScoped(scopes) {\n    const jwt = new JWT(this);\n    jwt.scopes = scopes;\n    return jwt;\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n\n\n  async getRequestMetadataAsync(url) {\n    url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n    const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes() || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n\n    if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n      throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n    }\n\n    if (!this.apiKey && useSelfSignedJWT) {\n      if (this.additionalClaims && this.additionalClaims.target_audience) {\n        const {\n          tokens\n        } = await this.refreshToken();\n        return {\n          headers: this.addSharedMetadataHeaders({\n            Authorization: `Bearer ${tokens.id_token}`\n          })\n        };\n      } else {\n        // no scopes have been set, but a uri has been provided. Use JWTAccess\n        // credentials.\n        if (!this.access) {\n          this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n        }\n\n        let scopes;\n\n        if (this.hasUserScopes()) {\n          scopes = this.scopes;\n        } else if (!url) {\n          scopes = this.defaultScopes;\n        }\n\n        const useScopes = this.useJWTAccessWithScope || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, // Scopes take precedent over audience for signing,\n        // so we only provide them if `useJWTAccessWithScope` is on or\n        // if we are in a non-default universe\n        useScopes ? scopes : undefined);\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    } else if (this.hasAnyScopes() || this.apiKey) {\n      return super.getRequestMetadataAsync(url);\n    } else {\n      // If no audience, apiKey, or scopes are provided, we should not attempt\n      // to populate any headers:\n      return {\n        headers: {}\n      };\n    }\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n\n\n  async fetchIdToken(targetAudience) {\n    // Create a new gToken for fetching an ID token\n    const gtoken = new gtoken_1.GoogleToken({\n      iss: this.email,\n      sub: this.subject,\n      scope: this.scopes || this.defaultScopes,\n      keyFile: this.keyFile,\n      key: this.key,\n      additionalClaims: {\n        target_audience: targetAudience\n      },\n      transporter: this.transporter\n    });\n    await gtoken.getToken({\n      forceRefresh: true\n    });\n\n    if (!gtoken.idToken) {\n      throw new Error('Unknown error: Failed to fetch ID token');\n    }\n\n    return gtoken.idToken;\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n\n\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n\n    return this.scopes.length > 0;\n  }\n  /**\n   * Are there any default or user scopes defined.\n   */\n\n\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n\n  async authorizeAsync() {\n    const result = await this.refreshToken();\n\n    if (!result) {\n      throw new Error('No result returned');\n    }\n\n    this.credentials = result.tokens;\n    this.credentials.refresh_token = 'jwt-placeholder';\n    this.key = this.gtoken.key;\n    this.email = this.gtoken.iss;\n    return result.tokens;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n\n\n  async refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const gtoken = this.createGToken();\n    const token = await gtoken.getToken({\n      forceRefresh: this.isTokenExpiring()\n    });\n    const tokens = {\n      access_token: token.access_token,\n      token_type: 'Bearer',\n      expiry_date: gtoken.expiresAt,\n      id_token: gtoken.idToken\n    };\n    this.emit('tokens', tokens);\n    return {\n      res: null,\n      tokens\n    };\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n\n\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims,\n        transporter: this.transporter\n      });\n    }\n\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    } // Extract the relevant information from the json key file.\n\n\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n    this.universeDomain = json.universe_domain || this.universeDomain;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n\n\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n\n\n  async getCredentials() {\n    if (this.key) {\n      return {\n        private_key: this.key,\n        client_email: this.email\n      };\n    } else if (this.keyFile) {\n      const gtoken = this.createGToken();\n      const creds = await gtoken.getCredentials(this.keyFile);\n      return {\n        private_key: creds.privateKey,\n        client_email: creds.clientEmail\n      };\n    }\n\n    throw new Error('A key or a keyFile must be provided to getCredentials.');\n  }\n\n}\n\nexports.JWT = JWT;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","authclient_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","additionalClaims","credentials","refresh_token","expiry_date","createScoped","jwt","getRequestMetadataAsync","url","defaultServicePath","useSelfSignedJWT","hasUserScopes","useJWTAccessWithScope","hasAnyScopes","universeDomain","DEFAULT_UNIVERSE","RangeError","apiKey","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","eagerRefreshThresholdMillis","defaultScopes","useScopes","getRequestHeaders","undefined","fetchIdToken","targetAudience","gtoken","GoogleToken","iss","sub","scope","transporter","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","result","refreshTokenNoCache","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","universe_domain","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nconst authclient_1 = require(\"./authclient\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super(opts);\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        const jwt = new JWT(this);\n        jwt.scopes = scopes;\n        return jwt;\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\n            (this.useJWTAccessWithScope && this.hasAnyScopes()) ||\n            this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n            throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n        }\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                }\n                else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const useScopes = this.useJWTAccessWithScope ||\n                    this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \n                // Scopes take precedent over audience for signing,\n                // so we only provide them if `useJWTAccessWithScope` is on or\n                // if we are in a non-default universe\n                useScopes ? scopes : undefined);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n            transporter: this.transporter,\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n"]},"metadata":{},"sourceType":"script"}
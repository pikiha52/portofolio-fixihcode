{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\n\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\n\nconst util_1 = require(\"../util\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\n\n\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier'); // Validate credential sourcing configuration.\n\n    if (!credentialSource && !awsSecurityCredentialsSupplier) {\n      throw new Error('A credential source or AWS security credentials supplier must be specified.');\n    }\n\n    if (credentialSource && awsSecurityCredentialsSupplier) {\n      throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n    }\n\n    if (awsSecurityCredentialsSupplier) {\n      this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n      this.regionalCredVerificationUrl = __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n      this.credentialSourceType = 'programmatic';\n    } else {\n      const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n      this.environmentId = credentialSourceOpts.get('environment_id'); // This is only required if the AWS region is not available in the\n      // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n\n      const regionUrl = credentialSourceOpts.get('region_url'); // This is only required if AWS security credentials are not available in\n      // environment variables.\n\n      const securityCredentialsUrl = credentialSourceOpts.get('url');\n      const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n      this.awsSecurityCredentialsSupplier = new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n        regionUrl: regionUrl,\n        securityCredentialsUrl: securityCredentialsUrl,\n        imdsV2SessionTokenUrl: imdsV2SessionTokenUrl\n      });\n      this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n      this.credentialSourceType = 'aws'; // Data validators.\n\n      this.validateEnvironmentId();\n    }\n\n    this.awsRequestSigner = null;\n    this.region = '';\n  }\n\n  validateEnvironmentId() {\n    var _b;\n\n    const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n\n    if (!match || !this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n    }\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint. This will call the\n   * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n   * Security Credentials, then use them to create a signed AWS STS request that\n   * can be exchanged for a GCP access token.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  async retrieveSubjectToken() {\n    // Initialize AWS request signer if not already initialized.\n    if (!this.awsRequestSigner) {\n      this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n      this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n        return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n      }, this.region);\n    } // Generate signed request to AWS STS GetCallerIdentity API.\n    // Use the required regional endpoint. Otherwise, the request will fail.\n\n\n    const options = await this.awsRequestSigner.getRequestOptions({ ..._a.RETRY_CONFIG,\n      url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n      method: 'POST'\n    }); // The GCP STS endpoint expects the headers to be formatted as:\n    // [\n    //   {key: 'x-amz-date', value: '...'},\n    //   {key: 'Authorization', value: '...'},\n    //   ...\n    // ]\n    // And then serialized as:\n    // encodeURIComponent(JSON.stringify({\n    //   url: '...',\n    //   method: 'POST',\n    //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n    // }))\n\n    const reformattedHeader = [];\n    const extendedHeaders = Object.assign({\n      // The full, canonical resource name of the workload identity pool\n      // provider, with or without the HTTPS prefix.\n      // Including this header as part of the signature is recommended to\n      // ensure data integrity.\n      'x-goog-cloud-target-resource': this.audience\n    }, options.headers); // Reformat header to GCP STS expected format.\n\n    for (const key in extendedHeaders) {\n      reformattedHeader.push({\n        key,\n        value: extendedHeaders[key]\n      });\n    } // Serialize the reformatted signed request.\n\n\n    return encodeURIComponent(JSON.stringify({\n      url: options.url,\n      method: options.method,\n      headers: reformattedHeader\n    }));\n  }\n\n}\n\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = {\n  value: 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15'\n};\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\n\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\n\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/awsclient.js"],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_a","_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL","Object","defineProperty","exports","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","defaultawssecuritycredentialssupplier_1","util_1","BaseExternalAccountClient","constructor","options","additionalOptions","opts","originalOrCamelOptions","credentialSource","awsSecurityCredentialsSupplier","Error","regionalCredVerificationUrl","credentialSourceType","credentialSourceOpts","environmentId","regionUrl","securityCredentialsUrl","imdsV2SessionTokenUrl","DefaultAwsSecurityCredentialsSupplier","validateEnvironmentId","awsRequestSigner","region","_b","match","parseInt","retrieveSubjectToken","getAwsRegion","supplierContext","AwsRequestSigner","getAwsSecurityCredentials","getRequestOptions","RETRY_CONFIG","url","replace","method","reformattedHeader","extendedHeaders","assign","audience","headers","key","push","encodeURIComponent","JSON","stringify","AWS_EC2_METADATA_IPV4_ADDRESS","AWS_EC2_METADATA_IPV6_ADDRESS"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\nconst util_1 = require(\"../util\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !awsSecurityCredentialsSupplier) {\n            throw new Error('A credential source or AWS security credentials supplier must be specified.');\n        }\n        if (credentialSource && awsSecurityCredentialsSupplier) {\n            throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n        }\n        if (awsSecurityCredentialsSupplier) {\n            this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n            this.regionalCredVerificationUrl =\n                __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            this.environmentId = credentialSourceOpts.get('environment_id');\n            // This is only required if the AWS region is not available in the\n            // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n            const regionUrl = credentialSourceOpts.get('region_url');\n            // This is only required if AWS security credentials are not available in\n            // environment variables.\n            const securityCredentialsUrl = credentialSourceOpts.get('url');\n            const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n            this.awsSecurityCredentialsSupplier =\n                new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n                    regionUrl: regionUrl,\n                    securityCredentialsUrl: securityCredentialsUrl,\n                    imdsV2SessionTokenUrl: imdsV2SessionTokenUrl,\n                });\n            this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n            this.credentialSourceType = 'aws';\n            // Data validators.\n            this.validateEnvironmentId();\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    validateEnvironmentId() {\n        var _b;\n        const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint. This will call the\n     * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n     * Security Credentials, then use them to create a signed AWS STS request that\n     * can be exchanged for a GCP access token.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            ..._a.RETRY_CONFIG,\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n}\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = { value: 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15' };\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n"]},"metadata":{},"sourceType":"script"}
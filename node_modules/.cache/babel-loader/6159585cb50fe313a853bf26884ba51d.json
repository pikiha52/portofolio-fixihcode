{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst querystring = require(\"querystring\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\n\n\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an STS credentials instance.\n   * @param tokenExchangeEndpoint The token exchange endpoint.\n   * @param clientAuthentication The client authentication credentials if\n   *   available.\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n\n\n  async exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _a, _b, _c;\n\n    const values = {\n      grant_type: stsCredentialsOptions.grantType,\n      resource: stsCredentialsOptions.resource,\n      audience: stsCredentialsOptions.audience,\n      scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n      requested_token_type: stsCredentialsOptions.requestedTokenType,\n      subject_token: stsCredentialsOptions.subjectToken,\n      subject_token_type: stsCredentialsOptions.subjectTokenType,\n      actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n      actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n      // Non-standard GCP-specific options.\n      options: options && JSON.stringify(options)\n    }; // Remove undefined fields.\n\n    Object.keys(values).forEach(key => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof values[key] === 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete values[key];\n      }\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }; // Inject additional STS headers if available.\n\n    Object.assign(headers, additionalHeaders || {});\n    const opts = { ...StsCredentials.RETRY_CONFIG,\n      url: this.tokenExchangeEndpoint.toString(),\n      method: 'POST',\n      headers,\n      data: querystring.stringify(values),\n      responseType: 'json'\n    }; // Apply OAuth client authentication.\n\n    this.applyClientAuthenticationOptions(opts);\n\n    try {\n      const response = await this.transporter.request(opts); // Successful response.\n\n      const stsSuccessfulResponse = response.data;\n      stsSuccessfulResponse.res = response;\n      return stsSuccessfulResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n        error);\n      } // Request could fail before the server responds.\n\n\n      throw error;\n    }\n  }\n\n}\n\nexports.StsCredentials = StsCredentials;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"names":["Object","defineProperty","exports","value","StsCredentials","gaxios_1","require","querystring","transporters_1","oauth2common_1","OAuthClientAuthHandler","constructor","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","exchangeToken","stsCredentialsOptions","additionalHeaders","options","_a","_b","_c","values","grant_type","grantType","resource","audience","scope","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","actingParty","actorToken","actor_token_type","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","RETRY_CONFIG","url","toString","method","data","responseType","applyClientAuthenticationOptions","response","request","stsSuccessfulResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst transporters_1 = require(\"../transporters\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options),\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach(key => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === 'undefined') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            ...StsCredentials.RETRY_CONFIG,\n            url: this.tokenExchangeEndpoint.toString(),\n            method: 'POST',\n            headers,\n            data: querystring.stringify(values),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n"]},"metadata":{},"sourceType":"script"}
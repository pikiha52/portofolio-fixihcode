{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityPoolClient = void 0;\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n\nconst util_1 = require(\"../util\");\n\nconst filesubjecttokensupplier_1 = require(\"./filesubjecttokensupplier\");\n\nconst urlsubjecttokensupplier_1 = require(\"./urlsubjecttokensupplier\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\n\n\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiate an IdentityPoolClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid file-sourced or\n   * url-sourced credential or a workforce pool user project is provided\n   * with a non workforce audience.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file. The camelCased options\n   *   are aliases for the snake_cased options.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const subjectTokenSupplier = opts.get('subject_token_supplier'); // Validate credential sourcing configuration.\n\n    if (!credentialSource && !subjectTokenSupplier) {\n      throw new Error('A credential source or subject token supplier must be specified.');\n    }\n\n    if (credentialSource && subjectTokenSupplier) {\n      throw new Error('Only one of credential source or subject token supplier can be specified.');\n    }\n\n    if (subjectTokenSupplier) {\n      this.subjectTokenSupplier = subjectTokenSupplier;\n      this.credentialSourceType = 'programmatic';\n    } else {\n      const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n      const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get('format')); // Text is the default format type.\n\n      const formatType = formatOpts.get('type') || 'text';\n      const formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n\n      if (formatType !== 'json' && formatType !== 'text') {\n        throw new Error(`Invalid credential_source format \"${formatType}\"`);\n      }\n\n      if (formatType === 'json' && !formatSubjectTokenFieldName) {\n        throw new Error('Missing subject_token_field_name for JSON credential_source format');\n      }\n\n      const file = credentialSourceOpts.get('file');\n      const url = credentialSourceOpts.get('url');\n      const headers = credentialSourceOpts.get('headers');\n\n      if (file && url) {\n        throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n      } else if (file && !url) {\n        this.credentialSourceType = 'file';\n        this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n          filePath: file,\n          formatType: formatType,\n          subjectTokenFieldName: formatSubjectTokenFieldName\n        });\n      } else if (!file && url) {\n        this.credentialSourceType = 'url';\n        this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n          url: url,\n          formatType: formatType,\n          subjectTokenFieldName: formatSubjectTokenFieldName,\n          headers: headers,\n          additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG\n        });\n      } else {\n        throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n      }\n    }\n  }\n  /**\n   * Triggered when a external subject token is needed to be exchanged for a GCP\n   * access token via GCP STS endpoint. Gets a subject token by calling\n   * the configured {@link SubjectTokenSupplier}\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  async retrieveSubjectToken() {\n    return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n  }\n\n}\n\nexports.IdentityPoolClient = IdentityPoolClient;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/identitypoolclient.js"],"names":["Object","defineProperty","exports","value","IdentityPoolClient","baseexternalclient_1","require","util_1","filesubjecttokensupplier_1","urlsubjecttokensupplier_1","BaseExternalAccountClient","constructor","options","additionalOptions","opts","originalOrCamelOptions","credentialSource","get","subjectTokenSupplier","Error","credentialSourceType","credentialSourceOpts","formatOpts","formatType","formatSubjectTokenFieldName","file","url","headers","FileSubjectTokenSupplier","filePath","subjectTokenFieldName","UrlSubjectTokenSupplier","additionalGaxiosOptions","RETRY_CONFIG","retrieveSubjectToken","getSubjectToken","supplierContext"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityPoolClient = void 0;\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst util_1 = require(\"../util\");\nconst filesubjecttokensupplier_1 = require(\"./filesubjecttokensupplier\");\nconst urlsubjecttokensupplier_1 = require(\"./urlsubjecttokensupplier\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const subjectTokenSupplier = opts.get('subject_token_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !subjectTokenSupplier) {\n            throw new Error('A credential source or subject token supplier must be specified.');\n        }\n        if (credentialSource && subjectTokenSupplier) {\n            throw new Error('Only one of credential source or subject token supplier can be specified.');\n        }\n        if (subjectTokenSupplier) {\n            this.subjectTokenSupplier = subjectTokenSupplier;\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n            // Text is the default format type.\n            const formatType = formatOpts.get('type') || 'text';\n            const formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n            if (formatType !== 'json' && formatType !== 'text') {\n                throw new Error(`Invalid credential_source format \"${formatType}\"`);\n            }\n            if (formatType === 'json' && !formatSubjectTokenFieldName) {\n                throw new Error('Missing subject_token_field_name for JSON credential_source format');\n            }\n            const file = credentialSourceOpts.get('file');\n            const url = credentialSourceOpts.get('url');\n            const headers = credentialSourceOpts.get('headers');\n            if (file && url) {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n            else if (file && !url) {\n                this.credentialSourceType = 'file';\n                this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n                    filePath: file,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                });\n            }\n            else if (!file && url) {\n                this.credentialSourceType = 'url';\n                this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n                    url: url,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                    headers: headers,\n                    additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG,\n                });\n            }\n            else {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint. Gets a subject token by calling\n     * the configured {@link SubjectTokenSupplier}\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAPIRequest = void 0;\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst qs = require(\"qs\");\n\nconst stream = require(\"stream\");\n\nconst urlTemplate = require(\"url-template\");\n\nconst uuid = require(\"uuid\");\n\nconst extend = require(\"extend\");\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nconst h2 = require(\"./http2\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst pkg = require('../../package.json'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction isReadableStream(obj) {\n  return obj !== null && typeof obj === 'object' && typeof obj.pipe === 'function' && obj.readable !== false && typeof obj._read === 'function' && typeof obj._readableState === 'object';\n}\n\nfunction getMissingParams(params, required) {\n  const missing = new Array();\n  required.forEach(param => {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  }); // If there are any required params missing, return their names in array,\n  // otherwise return null\n\n  return missing.length > 0 ? missing : null;\n}\n\nfunction createAPIRequest(parameters, callback) {\n  if (callback) {\n    createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n  } else {\n    return createAPIRequestAsync(parameters);\n  }\n}\n\nexports.createAPIRequest = createAPIRequest;\n\nasync function createAPIRequestAsync(parameters) {\n  var _a, _b, _c, _d; // Combine the GaxiosOptions options passed with this specific\n  // API call with the global options configured at the API Context\n  // level, or at the global level.\n\n\n  const options = extend(true, {}, // Ensure we don't leak settings upstream\n  ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n  parameters.context._options || {}, // Per-API options\n  parameters.options // API call params\n  );\n  const params = extend(true, {}, // New base object\n  options.params, // Combined global/per-api params\n  parameters.params // API call params\n  );\n  options.userAgentDirectives = options.userAgentDirectives || [];\n  const media = params.media || {};\n  /**\n   * In a previous version of this API, the request body was stuffed in a field\n   * named `resource`.  This caused lots of problems, because it's not uncommon\n   * to have an actual named parameter required which is also named `resource`.\n   * This meant that users would have to use `resource_` in those cases, which\n   * pretty much nobody figures out on their own. The request body is now\n   * documented as being in the `requestBody` property, but we also need to keep\n   * using `resource` for reasons of back-compat. Cases that need to be covered\n   * here:\n   * - user provides just a `resource` with a request body\n   * - user provides both a `resource` and a `resource_`\n   * - user provides just a `requestBody`\n   * - user provides both a `requestBody` and a `resource`\n   */\n\n  let resource = params.requestBody;\n\n  if (!params.requestBody && params.resource && (!parameters.requiredParams.includes('resource') || typeof params.resource !== 'string')) {\n    resource = params.resource;\n    delete params.resource;\n  }\n\n  delete params.requestBody;\n  let authClient = params.auth || options.auth;\n  const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.auth; // Grab headers from user provided options\n\n  const headers = params.headers || {};\n  populateAPIHeader(headers, options.apiVersion);\n  delete params.headers; // Un-alias parameters that were modified due to conflicts with reserved names\n\n  Object.keys(params).forEach(key => {\n    if (key.slice(-1) === '_') {\n      const newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  }); // Check for missing required parameters in the API request\n\n  const missingParams = getMissingParams(params, parameters.requiredParams);\n\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the\n    // developer which required params are not included in the request\n    throw new Error('Missing required parameters: ' + missingParams.join(', '));\n  } // Parse urls\n\n\n  if (options.url) {\n    let url = options.url;\n\n    if (typeof url === 'object') {\n      url = url.toString();\n    }\n\n    options.url = urlTemplate.parse(url).expand(params);\n  }\n\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n  } // Rewrite url if rootUrl is globally set\n\n\n  if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n    const originalUrl = new URL(options.url);\n    const path = originalUrl.href.substr(originalUrl.origin.length);\n    options.url = new URL(path, parameters.context._options.rootUrl).href;\n  } // When forming the querystring, override the serializer so that array\n  // values are serialized like this:\n  // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n  // This serializer also encodes spaces in the querystring as `%20`,\n  // whereas the default serializer in gaxios encodes to a `+`.\n\n\n  options.paramsSerializer = params => {\n    return qs.stringify(params, {\n      arrayFormat: 'repeat'\n    });\n  }; // delete path params from the params object so they do not end up in query\n\n\n  parameters.pathParams.forEach(param => delete params[param]); // if authClient is actually a string, use it as an API KEY\n\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = undefined;\n  }\n\n  function multipartUpload(multipart) {\n    const boundary = uuid.v4();\n    const finale = `--${boundary}--`;\n    const rStream = new stream.PassThrough({\n      flush(callback) {\n        this.push('\\r\\n');\n        this.push(finale);\n        callback();\n      }\n\n    });\n    const pStream = new ProgressStream();\n    const isStream = isReadableStream(multipart[1].body);\n    headers['content-type'] = `multipart/related; boundary=${boundary}`;\n\n    for (const part of multipart) {\n      const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n      rStream.push(preamble);\n\n      if (typeof part.body === 'string') {\n        rStream.push(part.body);\n        rStream.push('\\r\\n');\n      } else {\n        // Gaxios does not natively support onUploadProgress in node.js.\n        // Pipe through the pStream first to read the number of bytes read\n        // for the purpose of tracking progress.\n        pStream.on('progress', bytesRead => {\n          if (options.onUploadProgress) {\n            options.onUploadProgress({\n              bytesRead\n            });\n          }\n        });\n        part.body.pipe(pStream).pipe(rStream);\n      }\n    }\n\n    if (!isStream) {\n      rStream.push(finale);\n      rStream.push(null);\n    }\n\n    options.data = rStream;\n  }\n\n  function browserMultipartUpload(multipart) {\n    const boundary = uuid.v4();\n    const finale = `--${boundary}--`;\n    headers['content-type'] = `multipart/related; boundary=${boundary}`;\n    let content = '';\n\n    for (const part of multipart) {\n      const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n      content += preamble;\n\n      if (typeof part.body === 'string') {\n        content += part.body;\n        content += '\\r\\n';\n      }\n    }\n\n    content += finale;\n    options.data = content;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n\n    if (resource) {\n      params.uploadType = 'multipart';\n      const multipart = [{\n        'content-type': 'application/json',\n        body: JSON.stringify(resource)\n      }, {\n        'content-type': media.mimeType || resource && resource.mimeType || defaultMime,\n        body: media.body\n      }];\n\n      if (!(0, isbrowser_1.isBrowser)()) {\n        // gaxios doesn't support multipart/related uploads, so it has to\n        // be implemented here.\n        multipartUpload(multipart);\n      } else {\n        browserMultipartUpload(multipart);\n      }\n    } else {\n      params.uploadType = 'media';\n      Object.assign(headers, {\n        'content-type': media.mimeType || defaultMime\n      });\n      options.data = media.body;\n    }\n  } else {\n    options.data = resource || undefined;\n  }\n\n  options.headers = extend(true, options.headers || {}, headers);\n  options.params = params;\n\n  if (!(0, isbrowser_1.isBrowser)()) {\n    options.headers['Accept-Encoding'] = 'gzip';\n    options.userAgentDirectives.push({\n      product: 'google-api-nodejs-client',\n      version: pkg.version,\n      comment: 'gzip'\n    });\n    const userAgent = options.userAgentDirectives.map(d => {\n      let line = `${d.product}/${d.version}`;\n\n      if (d.comment) {\n        line += ` (${d.comment})`;\n      }\n\n      return line;\n    }).join(' ');\n    options.headers['User-Agent'] = userAgent;\n  } // By default gaxios treats any 2xx as valid, and all non 2xx status\n  // codes as errors.  This is a problem for HTTP 304s when used along\n  // with an eTag.\n\n\n  if (!options.validateStatus) {\n    options.validateStatus = status => {\n      return status >= 200 && status < 300 || status === 304;\n    };\n  } // Retry by default\n\n\n  options.retry = options.retry === undefined ? true : options.retry;\n  delete options.auth; // is overridden by our auth code\n  // Determine TPC universe\n\n  if (options.universeDomain && options.universe_domain && options.universeDomain !== options.universe_domain) {\n    throw new Error('Please set either universe_domain or universeDomain, but not both.');\n  }\n\n  const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object' ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;\n  const universeDomain = (_d = (_c = (_b = options.universeDomain) !== null && _b !== void 0 ? _b : options.universe_domain) !== null && _c !== void 0 ? _c : universeDomainEnvVar) !== null && _d !== void 0 ? _d : 'googleapis.com'; // Update URL to point to the given TPC universe\n\n  if (universeDomain !== 'googleapis.com' && options.url) {\n    const url = new URL(options.url);\n\n    if (url.hostname.endsWith('.googleapis.com')) {\n      url.hostname = url.hostname.replace(/googleapis\\.com$/, universeDomain);\n      options.url = url.toString();\n    }\n  } // Perform the HTTP request.  NOTE: this function used to return a\n  // mikeal/request object. Since the transition to Axios, the method is\n  // now void.  This may be a source of confusion for users upgrading from\n  // version 24.0 -> 25.0 or up.\n\n\n  if (authClient && typeof authClient === 'object') {\n    // Validate TPC universe\n    const universeFromAuth = typeof authClient.getUniverseDomain === 'function' ? await authClient.getUniverseDomain() : undefined;\n\n    if (universeFromAuth && universeDomain !== universeFromAuth) {\n      throw new Error(`The configured universe domain (${universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n    }\n\n    if (options.http2) {\n      const authHeaders = await authClient.getRequestHeaders(options.url);\n      const mooOpts = Object.assign({}, options);\n      mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n      return h2.request(mooOpts);\n    } else {\n      return authClient.request(options);\n    }\n  } else {\n    return new google_auth_library_1.DefaultTransporter().request(options);\n  }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\n\n\nclass ProgressStream extends stream.Transform {\n  constructor() {\n    super(...arguments);\n    this.bytesRead = 0;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _transform(chunk, encoding, callback) {\n    this.bytesRead += chunk.length;\n    this.emit('progress', this.bytesRead);\n    this.push(chunk);\n    callback();\n  }\n\n}\n\nfunction populateAPIHeader(headers, apiVersion) {\n  // TODO: we should eventually think about adding browser support for this\n  // populating the gl-web header (web support should also be added to\n  // google-auth-library-nodejs).\n  if (!(0, isbrowser_1.isBrowser)()) {\n    headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n  }\n\n  if (apiVersion) {\n    headers['x-goog-api-version'] = apiVersion;\n  }\n}","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/googleapis-common/build/src/apirequest.js"],"names":["Object","defineProperty","exports","value","createAPIRequest","google_auth_library_1","require","qs","stream","urlTemplate","uuid","extend","isbrowser_1","h2","pkg","isReadableStream","obj","pipe","readable","_read","_readableState","getMissingParams","params","required","missing","Array","forEach","param","undefined","push","length","parameters","callback","createAPIRequestAsync","then","r","_a","_b","_c","_d","options","context","google","_options","userAgentDirectives","media","resource","requestBody","requiredParams","includes","authClient","auth","defaultMime","body","headers","populateAPIHeader","apiVersion","keys","key","slice","newKey","missingParams","Error","join","url","toString","parse","expand","mediaUrl","rootUrl","originalUrl","URL","path","href","substr","origin","paramsSerializer","stringify","arrayFormat","pathParams","multipartUpload","multipart","boundary","v4","finale","rStream","PassThrough","flush","pStream","ProgressStream","isStream","part","preamble","on","bytesRead","onUploadProgress","data","browserMultipartUpload","content","uploadType","JSON","mimeType","isBrowser","assign","product","version","comment","userAgent","map","d","line","validateStatus","status","retry","universeDomain","universe_domain","universeDomainEnvVar","process","env","hostname","endsWith","replace","universeFromAuth","getUniverseDomain","http2","authHeaders","getRequestHeaders","mooOpts","request","DefaultTransporter","Transform","constructor","arguments","_transform","chunk","encoding","emit","versions","node"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAPIRequest = void 0;\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst extend = require(\"extend\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst h2 = require(\"./http2\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        typeof obj.pipe === 'function' &&\n        obj.readable !== false &&\n        typeof obj._read === 'function' &&\n        typeof obj._readableState === 'object');\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    var _a, _b, _c, _d;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, // Ensure we don't leak settings upstream\n    ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n    parameters.context._options || {}, // Per-API options\n    parameters.options // API call params\n    );\n    const params = extend(true, {}, // New base object\n    options.params, // Combined global/per-api params\n    parameters.params // API call params\n    );\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n    let resource = params.requestBody;\n    if (!params.requestBody &&\n        params.resource &&\n        (!parameters.requiredParams.includes('resource') ||\n            typeof params.resource !== 'string')) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers, options.apiVersion);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach(key => {\n        if (key.slice(-1) === '_') {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    }\n    // Parse urls\n    if (options.url) {\n        let url = options.url;\n        if (typeof url === 'object') {\n            url = url.toString();\n        }\n        options.url = urlTemplate.parse(url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined &&\n        options.url !== undefined) {\n        const originalUrl = new URL(options.url);\n        const path = originalUrl.href.substr(originalUrl.origin.length);\n        options.url = new URL(path, parameters.context._options.rootUrl).href;\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = params => {\n        return qs.stringify(params, { arrayFormat: 'repeat' });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach(param => delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === 'string') {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush(callback) {\n                this.push('\\r\\n');\n                this.push(finale);\n                callback();\n            },\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === 'string') {\n                rStream.push(part.body);\n                rStream.push('\\r\\n');\n            }\n            else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on('progress', bytesRead => {\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({ bytesRead });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        let content = '';\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === 'string') {\n                content += part.body;\n                content += '\\r\\n';\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = 'multipart';\n            const multipart = [\n                { 'content-type': 'application/json', body: JSON.stringify(resource) },\n                {\n                    'content-type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                    body: media.body,\n                },\n            ];\n            if (!(0, isbrowser_1.isBrowser)()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            }\n            else {\n                browserMultipartUpload(multipart);\n            }\n        }\n        else {\n            params.uploadType = 'media';\n            Object.assign(headers, { 'content-type': media.mimeType || defaultMime });\n            options.data = media.body;\n        }\n    }\n    else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!(0, isbrowser_1.isBrowser)()) {\n        options.headers['Accept-Encoding'] = 'gzip';\n        options.userAgentDirectives.push({\n            product: 'google-api-nodejs-client',\n            version: pkg.version,\n            comment: 'gzip',\n        });\n        const userAgent = options.userAgentDirectives\n            .map(d => {\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        })\n            .join(' ');\n        options.headers['User-Agent'] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = status => {\n            return (status >= 200 && status < 300) || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Determine TPC universe\n    if (options.universeDomain &&\n        options.universe_domain &&\n        options.universeDomain !== options.universe_domain) {\n        throw new Error('Please set either universe_domain or universeDomain, but not both.');\n    }\n    const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n        : undefined;\n    const universeDomain = (_d = (_c = (_b = options.universeDomain) !== null && _b !== void 0 ? _b : options.universe_domain) !== null && _c !== void 0 ? _c : universeDomainEnvVar) !== null && _d !== void 0 ? _d : 'googleapis.com';\n    // Update URL to point to the given TPC universe\n    if (universeDomain !== 'googleapis.com' && options.url) {\n        const url = new URL(options.url);\n        if (url.hostname.endsWith('.googleapis.com')) {\n            url.hostname = url.hostname.replace(/googleapis\\.com$/, universeDomain);\n            options.url = url.toString();\n        }\n    }\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === 'object') {\n        // Validate TPC universe\n        const universeFromAuth = typeof authClient.getUniverseDomain === 'function'\n            ? await authClient.getUniverseDomain()\n            : undefined;\n        if (universeFromAuth && universeDomain !== universeFromAuth) {\n            throw new Error(`The configured universe domain (${universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n        }\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        }\n        else {\n            return authClient.request(options);\n        }\n    }\n    else {\n        return new google_auth_library_1.DefaultTransporter().request(options);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers, apiVersion) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!(0, isbrowser_1.isBrowser)()) {\n        headers['x-goog-api-client'] =\n            `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n    if (apiVersion) {\n        headers['x-goog-api-version'] = apiVersion;\n    }\n}\n//# sourceMappingURL=apirequest.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\n\n\nexports.GCE_LINUX_BIOS_PATHS = {\n  BIOS_DATE: '/sys/class/dmi/id/bios_date',\n  BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor'\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\n\nfunction isGoogleCloudServerless() {\n  /**\n   * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   *\n   * `FUNCTION_NAME` is used in older Cloud Functions environments:\n   * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n   *\n   * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n   */\n  const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;\n  return !!isGFEnvironment;\n}\n\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\n\nfunction isGoogleComputeEngineLinux() {\n  if ((0, os_1.platform)() !== 'linux') return false;\n\n  try {\n    // ensure this file exist\n    (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE); // ensure this file exist and matches\n\n    const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n    return /Google/.test(biosVendor);\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\n\nfunction isGoogleComputeEngineMACAddress() {\n  const interfaces = (0, os_1.networkInterfaces)();\n\n  for (const item of Object.values(interfaces)) {\n    if (!item) continue;\n\n    for (const {\n      mac\n    } of item) {\n      if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\n\nfunction isGoogleComputeEngine() {\n  return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\n\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\n\nfunction detectGCPResidency() {\n  return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\n\nexports.detectGCPResidency = detectGCPResidency;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;AAEA;;;;;AAGaA,+BAAuB;AAClCC,WAAS,EAAE,6BADuB;AAElCC,aAAW,EAAE;AAFqB,CAAvB;AAKb,MAAMC,qBAAqB,GAAG,QAA9B;AAEA;;;;;;;;;;AASA,SAAgBC,uBAAhB,GAAuC;AACrC;;;;;;;;;;;AAWA,QAAMC,eAAe,GACnBC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IACAF,OAAO,CAACC,GAAR,CAAYE,aADZ,IAEAH,OAAO,CAACC,GAAR,CAAYG,SAHd;AAKA,SAAO,CAAC,CAACL,eAAT;AACD;;AAlBDL;AAoBA;;;;;;AAKA,SAAgBW,0BAAhB,GAA0C;AACxC,MAAI,yBAAe,OAAnB,EAA4B,OAAO,KAAP;;AAE5B,MAAI;AACF;AACA,uBAASX,6BAAqBC,SAA9B,EAFE,CAIF;;AACA,UAAMW,UAAU,GAAG,uBAAaZ,6BAAqBE,WAAlC,EAA+C,MAA/C,CAAnB;AAEA,WAAO,SAASW,IAAT,CAAcD,UAAd,CAAP;AACD,GARD,CAQE,WAAM;AACN,WAAO,KAAP;AACD;AACF;;AAdDZ;AAgBA;;;;;;;AAMA,SAAgBc,+BAAhB,GAA+C;AAC7C,QAAMC,UAAU,GAAG,6BAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,MAAP,CAAcH,UAAd,CAAnB,EAA8C;AAC5C,QAAI,CAACC,IAAL,EAAW;;AAEX,SAAK,MAAM;AAACG;AAAD,KAAX,IAAoBH,IAApB,EAA0B;AACxB,UAAIb,qBAAqB,CAACU,IAAtB,CAA2BM,GAA3B,CAAJ,EAAqC;AACnC,eAAO,IAAP;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD;;AAdDnB;AAgBA;;;;;;AAKA,SAAgBoB,qBAAhB,GAAqC;AACnC,SAAOT,0BAA0B,MAAMG,+BAA+B,EAAtE;AACD;;AAFDd;AAIA;;;;;;AAKA,SAAgBqB,kBAAhB,GAAkC;AAChC,SAAOjB,uBAAuB,MAAMgB,qBAAqB,EAAzD;AACD;;AAFDpB","names":["exports","BIOS_DATE","BIOS_VENDOR","GCE_MAC_ADDRESS_REGEX","isGoogleCloudServerless","isGFEnvironment","process","env","CLOUD_RUN_JOB","FUNCTION_NAME","K_SERVICE","isGoogleComputeEngineLinux","biosVendor","test","isGoogleComputeEngineMACAddress","interfaces","item","Object","values","mac","isGoogleComputeEngine","detectGCPResidency"],"sourceRoot":"","sources":["../../src/gcp-residency.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
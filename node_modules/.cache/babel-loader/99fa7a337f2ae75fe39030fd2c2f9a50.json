{"ast":null,"code":"\"use strict\"; // Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _LRUCache_instances, _LRUCache_cache, _LRUCache_moveToEnd, _LRUCache_evict;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LRUCache = exports.originalOrCamelOptions = exports.snakeToCamel = void 0;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @internal\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */\n\nfunction snakeToCamel(str) {\n  return str.replace(/([_][^_])/g, match => match.slice(1).toUpperCase());\n}\n\nexports.snakeToCamel = snakeToCamel;\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */\n\nfunction originalOrCamelOptions(obj) {\n  /**\n   *\n   * @param key an index of object, preferably snake_case\n   * @returns the value `obj[key || snakeKey]`, if available\n   */\n  function get(key) {\n    var _a;\n\n    const o = obj || {};\n    return (_a = o[key]) !== null && _a !== void 0 ? _a : o[snakeToCamel(key)];\n  }\n\n  return {\n    get\n  };\n}\n\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n * @internal\n */\n\nclass LRUCache {\n  constructor(options) {\n    _LRUCache_instances.add(this);\n    /**\n     * Maps are in order. Thus, the older item is the first item.\n     *\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n     */\n\n\n    _LRUCache_cache.set(this, new Map());\n\n    this.capacity = options.capacity;\n    this.maxAge = options.maxAge;\n  }\n  /**\n   * Add an item to the cache.\n   *\n   * @param key the key to upsert\n   * @param value the value of the key\n   */\n\n\n  set(key, value) {\n    __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, value);\n\n    __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n  }\n  /**\n   * Get an item from the cache.\n   *\n   * @param key the key to retrieve\n   */\n\n\n  get(key) {\n    const item = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").get(key);\n\n    if (!item) return;\n\n    __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, item.value);\n\n    __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n\n    return item.value;\n  }\n\n}\n\nexports.LRUCache = LRUCache;\n_LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToEnd = function _LRUCache_moveToEnd(key, value) {\n  __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(key);\n\n  __classPrivateFieldGet(this, _LRUCache_cache, \"f\").set(key, {\n    value,\n    lastAccessed: Date.now()\n  });\n}, _LRUCache_evict = function _LRUCache_evict() {\n  const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n  /**\n   * Because we know Maps are in order, this item is both the\n   * last item in the list (capacity) and oldest (maxAge).\n   */\n\n  let oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n\n  while (!oldestItem.done && (__classPrivateFieldGet(this, _LRUCache_cache, \"f\").size > this.capacity || // too many\n  oldestItem.value[1].lastAccessed < cutoffDate) // too old\n  ) {\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(oldestItem.value[0]);\n\n    oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n  }\n};","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/util.js"],"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_LRUCache_instances","_LRUCache_cache","_LRUCache_moveToEnd","_LRUCache_evict","Object","defineProperty","exports","LRUCache","originalOrCamelOptions","snakeToCamel","str","replace","match","slice","toUpperCase","obj","key","_a","o","constructor","options","add","set","Map","capacity","maxAge","item","WeakMap","WeakSet","delete","lastAccessed","Date","now","cutoffDate","oldestItem","entries","next","done","size"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LRUCache_instances, _LRUCache_cache, _LRUCache_moveToEnd, _LRUCache_evict;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LRUCache = exports.originalOrCamelOptions = exports.snakeToCamel = void 0;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @internal\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */\nfunction snakeToCamel(str) {\n    return str.replace(/([_][^_])/g, match => match.slice(1).toUpperCase());\n}\nexports.snakeToCamel = snakeToCamel;\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */\nfunction originalOrCamelOptions(obj) {\n    /**\n     *\n     * @param key an index of object, preferably snake_case\n     * @returns the value `obj[key || snakeKey]`, if available\n     */\n    function get(key) {\n        var _a;\n        const o = (obj || {});\n        return (_a = o[key]) !== null && _a !== void 0 ? _a : o[snakeToCamel(key)];\n    }\n    return { get };\n}\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n * @internal\n */\nclass LRUCache {\n    constructor(options) {\n        _LRUCache_instances.add(this);\n        /**\n         * Maps are in order. Thus, the older item is the first item.\n         *\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n         */\n        _LRUCache_cache.set(this, new Map());\n        this.capacity = options.capacity;\n        this.maxAge = options.maxAge;\n    }\n    /**\n     * Add an item to the cache.\n     *\n     * @param key the key to upsert\n     * @param value the value of the key\n     */\n    set(key, value) {\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n    }\n    /**\n     * Get an item from the cache.\n     *\n     * @param key the key to retrieve\n     */\n    get(key) {\n        const item = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").get(key);\n        if (!item)\n            return;\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, item.value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n        return item.value;\n    }\n}\nexports.LRUCache = LRUCache;\n_LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToEnd = function _LRUCache_moveToEnd(key, value) {\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(key);\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").set(key, {\n        value,\n        lastAccessed: Date.now(),\n    });\n}, _LRUCache_evict = function _LRUCache_evict() {\n    const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n    /**\n     * Because we know Maps are in order, this item is both the\n     * last item in the list (capacity) and oldest (maxAge).\n     */\n    let oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    while (!oldestItem.done &&\n        (__classPrivateFieldGet(this, _LRUCache_cache, \"f\").size > this.capacity || // too many\n            oldestItem.value[1].lastAccessed < cutoffDate) // too old\n    ) {\n        __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(oldestItem.value[0]);\n        oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    }\n};\n"]},"metadata":{},"sourceType":"script"}
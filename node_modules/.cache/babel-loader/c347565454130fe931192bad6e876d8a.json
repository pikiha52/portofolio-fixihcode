{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\n\nconst stream = require(\"stream\");\n\nconst authclient_1 = require(\"./authclient\");\n\nconst sts = require(\"./stscredentials\");\n\nconst util_1 = require(\"../util\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\n\n\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\n\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\n\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** Default impersonated token lifespan in seconds.*/\n\nconst DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\n\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\n\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/\n\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\n\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/token'; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nconst pkg = require('../../../package.json');\n/**\n * For backwards compatibility.\n */\n\n\nvar authclient_2 = require(\"./authclient\");\n\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", {\n  enumerable: true,\n  get: function () {\n    return authclient_2.DEFAULT_UNIVERSE;\n  }\n});\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\n\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n  /**\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file. The camelCased options\n   *   are aliases for the snake_cased options.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    var _a;\n\n    super({ ...options,\n      ...additionalOptions\n    });\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const type = opts.get('type');\n\n    if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` + `received \"${options.type}\"`);\n    }\n\n    const clientId = opts.get('client_id');\n    const clientSecret = opts.get('client_secret');\n    const tokenUrl = (_a = opts.get('token_url')) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain);\n    const subjectTokenType = opts.get('subject_token_type');\n    const workforcePoolUserProject = opts.get('workforce_pool_user_project');\n    const serviceAccountImpersonationUrl = opts.get('service_account_impersonation_url');\n    const serviceAccountImpersonation = opts.get('service_account_impersonation');\n    const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get('token_lifetime_seconds');\n    this.cloudResourceManagerURL = new URL(opts.get('cloud_resource_manager_url') || `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n\n    if (clientId) {\n      this.clientAuth = {\n        confidentialClientType: 'basic',\n        clientId,\n        clientSecret\n      };\n    }\n\n    this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n    this.scopes = opts.get('scopes') || [DEFAULT_OAUTH_SCOPE];\n    this.cachedAccessToken = null;\n    this.audience = opts.get('audience');\n    this.subjectTokenType = subjectTokenType;\n    this.workforcePoolUserProject = workforcePoolUserProject;\n    const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n\n    if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {\n      throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' + 'credentials.');\n    }\n\n    this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n    this.serviceAccountImpersonationLifetime = serviceAccountImpersonationLifetime;\n\n    if (this.serviceAccountImpersonationLifetime) {\n      this.configLifetimeRequested = true;\n    } else {\n      this.configLifetimeRequested = false;\n      this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n    }\n\n    this.projectNumber = this.getProjectNumber(this.audience);\n    this.supplierContext = {\n      audience: this.audience,\n      subjectTokenType: this.subjectTokenType,\n      transporter: this.transporter\n    };\n  }\n  /** The service account email to be impersonated, if available. */\n\n\n  getServiceAccountEmail() {\n    var _a;\n\n    if (this.serviceAccountImpersonationUrl) {\n      if (this.serviceAccountImpersonationUrl.length > 256) {\n        /**\n         * Prevents DOS attacks.\n         * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n         **/\n        throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n      } // Parse email from URL. The formal looks as follows:\n      // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n\n\n      const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n      const result = re.exec(this.serviceAccountImpersonationUrl);\n      return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n    }\n\n    return null;\n  }\n  /**\n   * Provides a mechanism to inject GCP access tokens directly.\n   * When the provided credential expires, a new credential, using the\n   * external account options, is retrieved.\n   * @param credentials The Credentials object to set on the current client.\n   */\n\n\n  setCredentials(credentials) {\n    super.setCredentials(credentials);\n    this.cachedAccessToken = credentials;\n  }\n  /**\n   * @return A promise that resolves with the current GCP access token\n   *   response. If the current credential is expired, a new one is retrieved.\n   */\n\n\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    } // Return GCP access token in GetAccessTokenResponse format.\n\n\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n  /**\n   * The main authentication interface. It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * The result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   */\n\n\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * @return A promise that resolves with the project ID corresponding to the\n   *   current workload identity pool or current workforce pool if\n   *   determinable. For workforce pool credential, it returns the project ID\n   *   corresponding to the workforcePoolUserProject.\n   *   This is introduced to match the current pattern of using the Auth\n   *   library:\n   *   const projectId = await auth.getProjectId();\n   *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n   *   const res = await client.request({ url });\n   *   The resource may not have permission\n   *   (resourcemanager.projects.get) to call this API or the required\n   *   scopes may not be selected:\n   *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n   */\n\n\n  async getProjectId() {\n    const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n\n    if (this.projectId) {\n      // Return previously determined project ID.\n      return this.projectId;\n    } else if (projectNumber) {\n      // Preferable not to use request() to avoid retrial policies.\n      const headers = await this.getRequestHeaders();\n      const response = await this.transporter.request({ ...BaseExternalAccountClient.RETRY_CONFIG,\n        headers,\n        url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n        responseType: 'json'\n      });\n      this.projectId = response.data.projectId;\n      return this.projectId;\n    }\n\n    return null;\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n   * @return A promise that resolves with the successful response.\n   */\n\n\n  async requestAsync(opts, reAuthRetried = false) {\n    let response;\n\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n\n      if (res) {\n        const statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n\n        if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n\n      throw e;\n    }\n\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * External credentials are exchanged for GCP access tokens via the token\n   * exchange endpoint and other settings provided in the client options\n   * object.\n   * If the service_account_impersonation_url is provided, an additional\n   * step to exchange the external account GCP access token for a service\n   * account impersonated token is performed.\n   * @return A promise that resolves with the fresh GCP access tokens.\n   */\n\n\n  async refreshAccessTokenAsync() {\n    // Retrieve the external credential.\n    const subjectToken = await this.retrieveSubjectToken(); // Construct the STS credentials options.\n\n    const stsCredentialsOptions = {\n      grantType: STS_GRANT_TYPE,\n      audience: this.audience,\n      requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n      subjectToken,\n      subjectTokenType: this.subjectTokenType,\n      // generateAccessToken requires the provided access token to have\n      // scopes:\n      // https://www.googleapis.com/auth/iam or\n      // https://www.googleapis.com/auth/cloud-platform\n      // The new service account access token scopes will match the user\n      // provided ones.\n      scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n    }; // Exchange the external credentials for a GCP access token.\n    // Client auth is prioritized over passing the workforcePoolUserProject\n    // parameter for STS token exchange.\n\n    const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n      userProject: this.workforcePoolUserProject\n    } : undefined;\n    const additionalHeaders = {\n      'x-goog-api-client': this.getMetricsHeaderValue()\n    };\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n\n    if (this.serviceAccountImpersonationUrl) {\n      this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n    } else if (stsResponse.expires_in) {\n      // Save response in cached access token.\n      this.cachedAccessToken = {\n        access_token: stsResponse.access_token,\n        expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n        res: stsResponse.res\n      };\n    } else {\n      // Save response in cached access token.\n      this.cachedAccessToken = {\n        access_token: stsResponse.access_token,\n        res: stsResponse.res\n      };\n    } // Save credentials.\n\n\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedAccessToken);\n    delete this.credentials.res; // Trigger tokens event to notify external listeners.\n\n    this.emit('tokens', {\n      refresh_token: null,\n      expiry_date: this.cachedAccessToken.expiry_date,\n      access_token: this.cachedAccessToken.access_token,\n      token_type: 'Bearer',\n      id_token: null\n    }); // Return the cached access token.\n\n    return this.cachedAccessToken;\n  }\n  /**\n   * Returns the workload identity pool project number if it is determinable\n   * from the audience resource name.\n   * @param audience The STS audience used to determine the project number.\n   * @return The project number associated with the workload identity pool, if\n   *   this can be determined from the STS audience field. Otherwise, null is\n   *   returned.\n   */\n\n\n  getProjectNumber(audience) {\n    // STS audience pattern:\n    // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n    const match = audience.match(/\\/projects\\/([^/]+)/);\n\n    if (!match) {\n      return null;\n    }\n\n    return match[1];\n  }\n  /**\n   * Exchanges an external account GCP access token for a service\n   * account impersonated access token using iamcredentials\n   * GenerateAccessToken API.\n   * @param token The access token to exchange for a service account access\n   *   token.\n   * @return A promise that resolves with the service account impersonated\n   *   credentials response.\n   */\n\n\n  async getImpersonatedAccessToken(token) {\n    const opts = { ...BaseExternalAccountClient.RETRY_CONFIG,\n      url: this.serviceAccountImpersonationUrl,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        scope: this.getScopesArray(),\n        lifetime: this.serviceAccountImpersonationLifetime + 's'\n      },\n      responseType: 'json'\n    };\n    const response = await this.transporter.request(opts);\n    const successResponse = response.data;\n    return {\n      access_token: successResponse.accessToken,\n      // Convert from ISO format to timestamp.\n      expiry_date: new Date(successResponse.expireTime).getTime(),\n      res: response\n    };\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param accessToken The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n\n\n  isExpired(accessToken) {\n    const now = new Date().getTime();\n    return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n  /**\n   * @return The list of scopes for the requested GCP access token.\n   */\n\n\n  getScopesArray() {\n    // Since scopes can be provided as string or array, the type should\n    // be normalized.\n    if (typeof this.scopes === 'string') {\n      return [this.scopes];\n    }\n\n    return this.scopes || [DEFAULT_OAUTH_SCOPE];\n  }\n\n  getMetricsHeaderValue() {\n    const nodeVersion = process.version.replace(/^v/, '');\n    const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n    const credentialSourceType = this.credentialSourceType ? this.credentialSourceType : 'unknown';\n    return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n  }\n\n}\n\nexports.BaseExternalAccountClient = BaseExternalAccountClient;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"],"names":["Object","defineProperty","exports","value","BaseExternalAccountClient","DEFAULT_UNIVERSE","CLOUD_RESOURCE_MANAGER","EXTERNAL_ACCOUNT_TYPE","EXPIRATION_TIME_OFFSET","stream","require","authclient_1","sts","util_1","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","DEFAULT_OAUTH_SCOPE","DEFAULT_TOKEN_LIFESPAN","WORKFORCE_AUDIENCE_PATTERN","DEFAULT_TOKEN_URL","pkg","authclient_2","enumerable","get","AuthClient","constructor","options","additionalOptions","_a","opts","originalOrCamelOptions","type","Error","clientId","clientSecret","tokenUrl","replace","universeDomain","subjectTokenType","workforcePoolUserProject","serviceAccountImpersonationUrl","serviceAccountImpersonation","serviceAccountImpersonationLifetime","cloudResourceManagerURL","URL","clientAuth","confidentialClientType","stsCredential","StsCredentials","scopes","cachedAccessToken","audience","workforceAudiencePattern","RegExp","match","configLifetimeRequested","projectNumber","getProjectNumber","supplierContext","transporter","getServiceAccountEmail","length","RangeError","re","result","exec","groups","email","setCredentials","credentials","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","res","getRequestHeaders","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","request","callback","requestAsync","then","r","e","response","getProjectId","projectId","RETRY_CONFIG","url","toString","responseType","data","reAuthRetried","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","forceRefreshOnFailure","subjectToken","retrieveSubjectToken","stsCredentialsOptions","grantType","requestedTokenType","scope","getScopesArray","userProject","undefined","additionalHeaders","getMetricsHeaderValue","stsResponse","exchangeToken","getImpersonatedAccessToken","expires_in","expiry_date","Date","getTime","assign","emit","refresh_token","token_type","id_token","method","lifetime","successResponse","accessToken","expireTime","now","eagerRefreshThresholdMillis","nodeVersion","process","version","saImpersonation","credentialSourceType"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\nconst util_1 = require(\"../util\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** Default impersonated token lifespan in seconds.*/\nconst DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/token';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../../package.json');\n/**\n * For backwards compatibility.\n */\nvar authclient_2 = require(\"./authclient\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", { enumerable: true, get: function () { return authclient_2.DEFAULT_UNIVERSE; } });\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super({ ...options, ...additionalOptions });\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const type = opts.get('type');\n        if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\n                `received \"${options.type}\"`);\n        }\n        const clientId = opts.get('client_id');\n        const clientSecret = opts.get('client_secret');\n        const tokenUrl = (_a = opts.get('token_url')) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain);\n        const subjectTokenType = opts.get('subject_token_type');\n        const workforcePoolUserProject = opts.get('workforce_pool_user_project');\n        const serviceAccountImpersonationUrl = opts.get('service_account_impersonation_url');\n        const serviceAccountImpersonation = opts.get('service_account_impersonation');\n        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get('token_lifetime_seconds');\n        this.cloudResourceManagerURL = new URL(opts.get('cloud_resource_manager_url') ||\n            `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n        if (clientId) {\n            this.clientAuth = {\n                confidentialClientType: 'basic',\n                clientId,\n                clientSecret,\n            };\n        }\n        this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n        this.scopes = opts.get('scopes') || [DEFAULT_OAUTH_SCOPE];\n        this.cachedAccessToken = null;\n        this.audience = opts.get('audience');\n        this.subjectTokenType = subjectTokenType;\n        this.workforcePoolUserProject = workforcePoolUserProject;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject &&\n            !this.audience.match(workforceAudiencePattern)) {\n            throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' +\n                'credentials.');\n        }\n        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n        this.serviceAccountImpersonationLifetime =\n            serviceAccountImpersonationLifetime;\n        if (this.serviceAccountImpersonationLifetime) {\n            this.configLifetimeRequested = true;\n        }\n        else {\n            this.configLifetimeRequested = false;\n            this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n        }\n        this.projectNumber = this.getProjectNumber(this.audience);\n        this.supplierContext = {\n            audience: this.audience,\n            subjectTokenType: this.subjectTokenType,\n            transporter: this.transporter,\n        };\n    }\n    /** The service account email to be impersonated, if available. */\n    getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            if (this.serviceAccountImpersonationUrl.length > 256) {\n                /**\n                 * Prevents DOS attacks.\n                 * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n                 **/\n                throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n            }\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n    async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        }\n        else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                ...BaseExternalAccountClient.RETRY_CONFIG,\n                headers,\n                url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n                responseType: 'json',\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n    async refreshAccessTokenAsync() {\n        // Retrieve the external credential.\n        const subjectToken = await this.retrieveSubjectToken();\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            audience: this.audience,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken,\n            subjectTokenType: this.subjectTokenType,\n            // generateAccessToken requires the provided access token to have\n            // scopes:\n            // https://www.googleapis.com/auth/iam or\n            // https://www.googleapis.com/auth/cloud-platform\n            // The new service account access token scopes will match the user\n            // provided ones.\n            scope: this.serviceAccountImpersonationUrl\n                ? [DEFAULT_OAUTH_SCOPE]\n                : this.getScopesArray(),\n        };\n        // Exchange the external credentials for a GCP access token.\n        // Client auth is prioritized over passing the workforcePoolUserProject\n        // parameter for STS token exchange.\n        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject\n            ? { userProject: this.workforcePoolUserProject }\n            : undefined;\n        const additionalHeaders = {\n            'x-goog-api-client': this.getMetricsHeaderValue(),\n        };\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n        if (this.serviceAccountImpersonationUrl) {\n            this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n        }\n        else if (stsResponse.expires_in) {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                res: stsResponse.res,\n            };\n        }\n        else {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                res: stsResponse.res,\n            };\n        }\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedAccessToken.expiry_date,\n            access_token: this.cachedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n    getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n    async getImpersonatedAccessToken(token) {\n        const opts = {\n            ...BaseExternalAccountClient.RETRY_CONFIG,\n            url: this.serviceAccountImpersonationUrl,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            data: {\n                scope: this.getScopesArray(),\n                lifetime: this.serviceAccountImpersonationLifetime + 's',\n            },\n            responseType: 'json',\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response,\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n    getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === 'string') {\n            return [this.scopes];\n        }\n        return this.scopes || [DEFAULT_OAUTH_SCOPE];\n    }\n    getMetricsHeaderValue() {\n        const nodeVersion = process.version.replace(/^v/, '');\n        const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n        const credentialSourceType = this.credentialSourceType\n            ? this.credentialSourceType\n            : 'unknown';\n        return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n"]},"metadata":{},"sourceType":"script"}
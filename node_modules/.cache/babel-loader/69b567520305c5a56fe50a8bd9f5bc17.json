{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.bulk = exports.universe = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require(\"json-bigint\");\n\nconst gcp_residency_1 = require(\"./gcp-residency\");\n\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\n\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n  'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n  none: \"don't try to ping the metadata server, but don't try to use it either\",\n  'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n  'ping-only': 'skip the BIOS probe, and go straight to pinging'\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\n\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  } // If no scheme is provided default to HTTP:\n\n\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n\n  return new URL(exports.BASE_PATH, baseUrl).href;\n} // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nasync function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {\n  let metadataKey = '';\n  let params = {};\n  let headers = {};\n\n  if (typeof type === 'object') {\n    const metadataAccessor = type;\n    metadataKey = metadataAccessor.metadataKey;\n    params = metadataAccessor.params || params;\n    headers = metadataAccessor.headers || headers;\n    noResponseRetries = metadataAccessor.noResponseRetries || noResponseRetries;\n    fastFail = metadataAccessor.fastFail || fastFail;\n  } else {\n    metadataKey = type;\n  }\n\n  if (typeof options === 'string') {\n    metadataKey += `/${options}`;\n  } else {\n    validate(options);\n\n    if (options.property) {\n      metadataKey += `/${options.property}`;\n    }\n\n    headers = options.headers || headers;\n    params = options.params || params;\n  }\n\n  try {\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const res = await requestMethod({\n      url: `${getBaseUrl()}/${metadataKey}`,\n      headers: { ...exports.HEADERS,\n        ...headers\n      },\n      retryConfig: {\n        noResponseRetries\n      },\n      params,\n      responseType: 'text',\n      timeout: requestTimeout()\n    }); // NOTE: node.js converts all incoming headers to lower case.\n\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n      throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n    } else if (!res.data) {\n      throw new Error('Invalid response from the metadata service');\n    }\n\n    if (typeof res.data === 'string') {\n      try {\n        return jsonBigint.parse(res.data);\n      } catch (_a) {\n        /* ignore */\n      }\n    }\n\n    return res.data;\n  } catch (e) {\n    const err = e;\n\n    if (err.response && err.response.status !== 200) {\n      err.message = `Unsuccessful response status code. ${err.message}`;\n    }\n\n    throw e;\n  }\n}\n\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = { ...options,\n    url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  }; // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment signficantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Additional logic has been added to make sure that we don't create an\n  // unhandled rejection in scenarios where a failure happens sometime\n  // after a success.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n\n  let responded = false;\n  const r1 = (0, gaxios_1.request)(options).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r2;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r1;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const serviceAccount: {} = await instance('service-accounts/');\n * const serviceAccountEmail: string = await instance('service-accounts/default/email');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP project.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const projectId: string = await project('project-id');\n * const numericProjectId: number = await project('numeric-project-id');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/**\n * Obtain metadata for the current universe.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const universeDomain: string = await universe('universe_domain');\n * ```\n */\n\nfunction universe(options) {\n  return metadataAccessor('universe', options);\n}\n\nexports.universe = universe;\n/**\n * Retrieve metadata items in parallel.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const data = await bulk([\n *   {\n *     metadataKey: 'instance',\n *   },\n *   {\n *     metadataKey: 'project/project-id',\n *   },\n * ] as const);\n *\n * // data.instance;\n * // data['project/project-id'];\n * ```\n *\n * @param properties The metadata properties to retrieve\n * @returns The metadata in `metadatakey:value` format\n */\n\nasync function bulk(properties) {\n  const r = {};\n  await Promise.all(properties.map(item => {\n    return (async () => {\n      const res = await metadataAccessor(item);\n      const key = item.metadataKey;\n      r[key] = res;\n    })();\n  }));\n  return r;\n}\n\nexports.bulk = bulk;\n/*\n * How many times should we retry detecting GCP environment.\n */\n\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\n\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\n\nasync function isAvailable() {\n  if (process.env.METADATA_SERVER_DETECTION) {\n    const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n\n    if (!(value in exports.METADATA_SERVER_DETECTION)) {\n      throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n    }\n\n    switch (value) {\n      case 'assume-present':\n        return true;\n\n      case 'none':\n        return false;\n\n      case 'bios-only':\n        return getGCPResidency();\n\n      case 'ping-only': // continue, we want to ping the server\n\n    }\n  }\n\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (e) {\n    const err = e;\n\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && ( // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code;\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      } // Failure to resolve the metadata service means that it is not available.\n\n\n      return false;\n    }\n  }\n}\n\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\n\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\n\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\n\nfunction getGCPResidency() {\n  if (exports.gcpResidencyCache === null) {\n    setGCPResidency();\n  }\n\n  return exports.gcpResidencyCache;\n}\n\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\n\nfunction setGCPResidency(value = null) {\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\n\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\n\nfunction requestTimeout() {\n  return getGCPResidency() ? 0 : 3000;\n}\n\nexports.requestTimeout = requestTimeout;\n\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","none","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","metadataKey","params","headers","property","requestMethod","fastFailMetadataRequest","gaxios_1","res","url","retryConfig","responseType","timeout","requestTimeout","toLowerCase","data","jsonBigint","parse","e","err","response","status","message","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","instance","project","universe","bulk","properties","r","all","map","item","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","isAvailable","METADATA_SERVER_DETECTION","value","trim","toLocaleLowerCase","RangeError","join","getGCPResidency","undefined","DEBUG_AUTH","console","info","code","includes","emitWarning","resetIsAvailableCache","setGCPResidency","__exportStar"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
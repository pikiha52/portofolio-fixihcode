{"ast":null,"code":"\"use strict\"; // Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlSubjectTokenSupplier = void 0;\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\n\nclass UrlSubjectTokenSupplier {\n  /**\n   * Instantiates a URL subject token supplier.\n   * @param opts The URL subject token supplier options to build the supplier with.\n   */\n  constructor(opts) {\n    this.url = opts.url;\n    this.formatType = opts.formatType;\n    this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    this.headers = opts.headers;\n    this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n  }\n  /**\n   * Sends a GET request to the URL provided in the constructor and resolves\n   * with the returned external subject token.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link IdentityPoolClient}, contains the requested audience and subject\n   *   token type for the external account identity. Not used.\n   */\n\n\n  async getSubjectToken(context) {\n    const opts = { ...this.additionalGaxiosOptions,\n      url: this.url,\n      method: 'GET',\n      headers: this.headers,\n      responseType: this.formatType\n    };\n    let subjectToken;\n\n    if (this.formatType === 'text') {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data;\n    } else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data[this.subjectTokenFieldName];\n    }\n\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source URL');\n    }\n\n    return subjectToken;\n  }\n\n}\n\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js"],"names":["Object","defineProperty","exports","value","UrlSubjectTokenSupplier","constructor","opts","url","formatType","subjectTokenFieldName","headers","additionalGaxiosOptions","getSubjectToken","context","method","responseType","subjectToken","response","transporter","request","data","Error"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;AACA;AACA;AACA;AACA;;AACA,MAAMA,uBAAN,CAA8B;AAC1B;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKC,GAAL,GAAWD,IAAI,CAACC,GAAhB;AACA,SAAKC,UAAL,GAAkBF,IAAI,CAACE,UAAvB;AACA,SAAKC,qBAAL,GAA6BH,IAAI,CAACG,qBAAlC;AACA,SAAKC,OAAL,GAAeJ,IAAI,CAACI,OAApB;AACA,SAAKC,uBAAL,GAA+BL,IAAI,CAACK,uBAApC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACyB,QAAfC,eAAe,CAACC,OAAD,EAAU;AAC3B,UAAMP,IAAI,GAAG,EACT,GAAG,KAAKK,uBADC;AAETJ,MAAAA,GAAG,EAAE,KAAKA,GAFD;AAGTO,MAAAA,MAAM,EAAE,KAHC;AAITJ,MAAAA,OAAO,EAAE,KAAKA,OAJL;AAKTK,MAAAA,YAAY,EAAE,KAAKP;AALV,KAAb;AAOA,QAAIQ,YAAJ;;AACA,QAAI,KAAKR,UAAL,KAAoB,MAAxB,EAAgC;AAC5B,YAAMS,QAAQ,GAAG,MAAMJ,OAAO,CAACK,WAAR,CAAoBC,OAApB,CAA4Bb,IAA5B,CAAvB;AACAU,MAAAA,YAAY,GAAGC,QAAQ,CAACG,IAAxB;AACH,KAHD,MAIK,IAAI,KAAKZ,UAAL,KAAoB,MAApB,IAA8B,KAAKC,qBAAvC,EAA8D;AAC/D,YAAMQ,QAAQ,GAAG,MAAMJ,OAAO,CAACK,WAAR,CAAoBC,OAApB,CAA4Bb,IAA5B,CAAvB;AACAU,MAAAA,YAAY,GAAGC,QAAQ,CAACG,IAAT,CAAc,KAAKX,qBAAnB,CAAf;AACH;;AACD,QAAI,CAACO,YAAL,EAAmB;AACf,YAAM,IAAIK,KAAJ,CAAU,kEAAV,CAAN;AACH;;AACD,WAAOL,YAAP;AACH;;AAxCyB;;AA0C9Bd,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlSubjectTokenSupplier = void 0;\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass UrlSubjectTokenSupplier {\n    /**\n     * Instantiates a URL subject token supplier.\n     * @param opts The URL subject token supplier options to build the supplier with.\n     */\n    constructor(opts) {\n        this.url = opts.url;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n        this.headers = opts.headers;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Sends a GET request to the URL provided in the constructor and resolves\n     * with the returned external subject token.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.url,\n            method: 'GET',\n            headers: this.headers,\n            responseType: this.formatType,\n        };\n        let subjectToken;\n        if (this.formatType === 'text') {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n        }\n        return subjectToken;\n    }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar _a, _b, _c;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSubjectTokenSupplier = void 0;\n\nconst util_1 = require(\"util\");\n\nconst fs = require(\"fs\"); // fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\n\n\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {});\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {});\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {});\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\n\nclass FileSubjectTokenSupplier {\n  /**\n   * Instantiates a new file based subject token supplier.\n   * @param opts The file subject token supplier options to build the supplier\n   *   with.\n   */\n  constructor(opts) {\n    this.filePath = opts.filePath;\n    this.formatType = opts.formatType;\n    this.subjectTokenFieldName = opts.subjectTokenFieldName;\n  }\n  /**\n   * Returns the subject token stored at the file specified in the constructor.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link IdentityPoolClient}, contains the requested audience and subject\n   *   token type for the external account identity. Not used.\n   */\n\n\n  async getSubjectToken(context) {\n    // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n    let parsedFilePath = this.filePath;\n\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      parsedFilePath = await realpath(parsedFilePath);\n\n      if (!(await lstat(parsedFilePath)).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n      }\n\n      throw err;\n    }\n\n    let subjectToken;\n    const rawText = await readFile(parsedFilePath, {\n      encoding: 'utf8'\n    });\n\n    if (this.formatType === 'text') {\n      subjectToken = rawText;\n    } else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n      const json = JSON.parse(rawText);\n      subjectToken = json[this.subjectTokenFieldName];\n    }\n\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source file');\n    }\n\n    return subjectToken;\n  }\n\n}\n\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js"],"names":["_a","_b","_c","Object","defineProperty","exports","value","FileSubjectTokenSupplier","util_1","require","fs","readFile","promisify","realpath","lstat","constructor","opts","filePath","formatType","subjectTokenFieldName","getSubjectToken","context","parsedFilePath","isFile","Error","err","message","subjectToken","rawText","encoding","json","JSON","parse"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileSubjectTokenSupplier = void 0;\nconst util_1 = require(\"util\");\nconst fs = require(\"fs\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : (() => { }));\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : (() => { }));\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : (() => { }));\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass FileSubjectTokenSupplier {\n    /**\n     * Instantiates a new file based subject token supplier.\n     * @param opts The file subject token supplier options to build the supplier\n     *   with.\n     */\n    constructor(opts) {\n        this.filePath = opts.filePath;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    }\n    /**\n     * Returns the subject token stored at the file specified in the constructor.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        let parsedFilePath = this.filePath;\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            parsedFilePath = await realpath(parsedFilePath);\n            if (!(await lstat(parsedFilePath)).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(parsedFilePath, { encoding: 'utf8' });\n        if (this.formatType === 'text') {\n            subjectToken = rawText;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n        }\n        return subjectToken;\n    }\n}\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;\n"]},"metadata":{},"sourceType":"script"}
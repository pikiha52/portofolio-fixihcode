{"ast":null,"code":"\"use strict\"; // Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\n\nconst authclient_1 = require(\"./authclient\");\n\nconst oauth2common_1 = require(\"./oauth2common\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst stream = require(\"stream\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\n\n\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/oauthtoken';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\n\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an ExternalAccountAuthorizedUserHandler instance.\n   * @param url The URL of the token refresh endpoint.\n   * @param transporter The transporter to use for the refresh request.\n   * @param clientAuthentication The client authentication credentials to use\n   *   for the refresh request.\n   */\n  constructor(url, transporter, clientAuthentication) {\n    super(clientAuthentication);\n    this.url = url;\n    this.transporter = transporter;\n  }\n  /**\n   * Requests a new access token from the token_url endpoint using the provided\n   *   refresh token.\n   * @param refreshToken The refresh token to use to generate a new access token.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @return A promise that resolves with the token refresh response containing\n   *   the requested access token and its expiration time.\n   */\n\n\n  async refreshToken(refreshToken, additionalHeaders) {\n    const values = new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token: refreshToken\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      ...additionalHeaders\n    };\n    const opts = { ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n      url: this.url,\n      method: 'POST',\n      headers,\n      data: values.toString(),\n      responseType: 'json'\n    }; // Apply OAuth client authentication.\n\n    this.applyClientAuthenticationOptions(opts);\n\n    try {\n      const response = await this.transporter.request(opts); // Successful response.\n\n      const tokenRefreshResponse = response.data;\n      tokenRefreshResponse.res = response;\n      return tokenRefreshResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n        error);\n      } // Request could fail before the server responds.\n\n\n      throw error;\n    }\n  }\n\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\n\n\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n  /**\n   * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n   * provided JSON object loaded from a credentials files.\n   * An error is throws if the credential is not valid.\n   * @param options The external account authorized user option object typically\n   *   from the external accoutn authorized user JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    var _a;\n\n    super({ ...options,\n      ...additionalOptions\n    });\n\n    if (options.universe_domain) {\n      this.universeDomain = options.universe_domain;\n    }\n\n    this.refreshToken = options.refresh_token;\n    const clientAuth = {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    };\n    this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler((_a = options.token_url) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain), this.transporter, clientAuth);\n    this.cachedAccessToken = null;\n    this.quotaProjectId = options.quota_project_id; // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n\n    this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n  }\n\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    } // Return GCP access token in GetAccessTokenResponse format.\n\n\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n   * @return A promise that resolves with the successful response.\n   */\n\n\n  async requestAsync(opts, reAuthRetried = false) {\n    let response;\n\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n\n      if (res) {\n        const statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n\n        if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n\n      throw e;\n    }\n\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * @return A promise that resolves with the refreshed credential.\n   */\n\n\n  async refreshAccessTokenAsync() {\n    // Refresh the access token using the refresh token.\n    const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n    this.cachedAccessToken = {\n      access_token: refreshResponse.access_token,\n      expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n      res: refreshResponse.res\n    };\n\n    if (refreshResponse.refresh_token !== undefined) {\n      this.refreshToken = refreshResponse.refresh_token;\n    }\n\n    return this.cachedAccessToken;\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param credentials The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n\n\n  isExpired(credentials) {\n    const now = new Date().getTime();\n    return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n\n}\n\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;","map":{"version":3,"sources":["/Users/fikihalan/Documents/source/frontend/portofolio-fixihcode/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"],"names":["Object","defineProperty","exports","value","ExternalAccountAuthorizedUserClient","EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE","authclient_1","require","oauth2common_1","gaxios_1","stream","baseexternalclient_1","DEFAULT_TOKEN_URL","ExternalAccountAuthorizedUserHandler","OAuthClientAuthHandler","constructor","url","transporter","clientAuthentication","refreshToken","additionalHeaders","values","URLSearchParams","grant_type","refresh_token","headers","opts","RETRY_CONFIG","method","data","toString","responseType","applyClientAuthenticationOptions","response","request","tokenRefreshResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse","AuthClient","options","additionalOptions","_a","universe_domain","universeDomain","clientAuth","confidentialClientType","clientId","client_id","clientSecret","client_secret","externalAccountAuthorizedUserHandler","token_url","replace","cachedAccessToken","quotaProjectId","quota_project_id","eagerRefreshThresholdMillis","EXPIRATION_TIME_OFFSET","forceRefreshOnFailure","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","getRequestHeaders","accessTokenResponse","Authorization","addSharedMetadataHeaders","callback","requestAsync","then","r","e","reAuthRetried","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","refreshResponse","expiry_date","Date","getTime","expires_in","undefined","credentials","now"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/oauthtoken';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */\n    constructor(url, transporter, clientAuthentication) {\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */\n    async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            ...additionalHeaders,\n        };\n        const opts = {\n            ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n            url: this.url,\n            method: 'POST',\n            headers,\n            data: values.toString(),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super({ ...options, ...additionalOptions });\n        if (options.universe_domain) {\n            this.universeDomain = options.universe_domain;\n        }\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: 'basic',\n            clientId: options.client_id,\n            clientSecret: options.client_secret,\n        };\n        this.externalAccountAuthorizedUserHandler =\n            new ExternalAccountAuthorizedUserHandler((_a = options.token_url) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain), this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */\n    async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res,\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date\n            ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n"]},"metadata":{},"sourceType":"script"}